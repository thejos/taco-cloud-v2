##--- By default, Spring Boot logs only to the console and does not write log files.
# If you want to write log files in addition to the console output, you need to set a
##--- logging.file.name or logging.path property ------------------------------------
#logging.file.name=TacoCloud_log.log

#server.error.include-binding-errors=always
#server.error.include-exception=true
#server.error.include-message=always
#server.error.include-stacktrace=always

#logging.level.org.springframework = DEBUG
#logging.level.web=DEBUG

##--- Uncomment the line below if Spring Boot DevTools dependency is not used (is not in the build)
#spring.h2.console.enabled=true

##--- By default, the database name is randomly generated. But that makes it hard to determine the
# database URL if, for some reason, you need to connect to the database using the H2 Console
# (which Spring Boot DevTools enables at http://localhost:8080/h2-console)
# By setting the spring.datasource.generate-unique-name property to false 
##--- Spring will not generate a unique random value for the database name. ----------------------
spring.datasource.generate-unique-name=false

## value set to spring.datasource.name will be the database name
## database URL will be "jdbc:h2:mem:tacos"
spring.datasource.name=tacos

spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

##--- By default configuration, Spring Boot will search for entities in project packages and create -----
# the respective tables automatically. Spring provides a JPA-specific property which Hibernate 
# uses for DDL generation: spring.jpa.hibernate.ddl-auto.
# Spring Boot internally defaults this parameter value to [create-drop] if no schema manager has
# been detected, otherwise [none] for all other cases.
##--- In production, it's often highly recommended you use [none] or simply don't specify this property. -----
#spring.jpa.hibernate.ddl-auto=validate

##--- Enable HTTPS --------------------------------------------------------
# The HTTPS protocol provides a protected connection between a client and the server by using a security layer (TLS/SSL).
# In most cases, keystore is used when application needs to communicate over SSL/TLS.
# Usually, a keystore is used on a server and when a server wants to use HTTPS. During an SSL handshake,
# the server looks up the private key from the keystore and presents its corresponding public key and certificate to the client.
# Correspondingly, if the client also needs to authenticate itself - a situation called mutual authentication - then the 
# client also has a keystore and also presents its public key and certificate.
# Either keytool or OpenSSL tools are used to generate the certificates (keystore) from the command line.
# Keytool is shipped with Java Runtime Environment, and OpenSSL can be downloaded from https://www.openssl.org
# The default format used for keystore file is JKS until Java 8. Since Java 9, though, the default keystore format is PKCS12.
# PKCS12: Public Key Cryptographic Standards is a password protected format that can contain multiple certificates and keys;
# it's an industry-wide used format.
# JKS: Java KeyStore is similar to PKCS12; it's a proprietary format and is limited to the Java environment.
##--- Configure the server ------------------------------------------------
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate...
# NOTE: In production, do not package Keystores inside Jar Files/Application Archive Files
# and do not store keystores in the application Git repository
# All keys and secrets must be decoupled from source code and stored separately.
server.ssl.key-store=classpath:ssl/tacocloud.p12
# Certificate unique alias. Keytool commands must use this same alias to refer to the entity. 
server.ssl.key-alias=tacocloud
# The password used to generate the certificate
server.ssl.key-store-password=tacocloud
server.ssl.key-password=tacocloud
# Change to a secure port...
server.port=8443
# for browsers to use HTTPS by default without a port number set: server.port=443
# accept only HTTPS requests
server.ssl.enabled=true
##------------------------------------------------------------------------