##- By default, Spring Boot logs only to the console and does not write log files.
# If you want to write log files in addition to the console output, you need to set a
##- logging.file.name or logging.path property
#logging.file.name=TacoCloud_log.log

#logging.level.org.springframework = DEBUG
#logging.level.web=DEBUG

### Uncomment the line below if Spring Boot DevTools dependency is not used (is not in the build)
#spring.h2.console.enabled=true

##- By default, the database name is randomly generated. But that makes it hard to determine the
# database URL if, for some reason, you need to connect to the database using the H2 Console
# (which Spring Boot DevTools enables at http://localhost:8080/h2-console)
# By setting the spring.datasource.generate-unique-name property to false 
##- Spring will not generate a unique random value for the database name.
spring.datasource.generate-unique-name=false

##- value set to spring.datasource.name will be the database name
##- database URL will be "jdbc:h2:mem:tacos"
spring.datasource.name=tacos

spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

##- By default configuration, Spring Boot will search for entities in project packages and create
# the respective tables automatically. Spring provides a JPA-specific property which Hibernate 
# uses for DDL generation: spring.jpa.hibernate.ddl-auto.
# Spring Boot internally defaults this parameter value to [create-drop] if no schema manager has
# been detected, otherwise [none] for all other cases.
##- In production, it's often highly recommended you use [none] or simply don't specify this property. 
#spring.jpa.hibernate.ddl-auto=validate

#server.error.include-binding-errors=always
#server.error.include-exception=true
#server.error.include-message=always
#server.error.include-stacktrace=always